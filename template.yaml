AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.9
  
  Sample SAM Template for mercury-Controller-metaapi-sam
  
Parameters:
  ProjectName:
    Description: The name of the project that will be prefixed to resource names
    Type: String
    Default: mercury
  Datalake:
    Description: Name of the datalake bucket
    Type: String
    Default: datalake.dgriffiths.io
  MetaAPIKey:
    Description: The Arn for the MetaAPIKey Secret
    Type: String
    Default: arn:aws:secretsmanager:eu-west-2:008739416430:secret:metaapi-key-63qzoR
  MetaAPIDemoAccountID:
    Description: The Arn for the MetaAPIDemoAccountID Secret
    Type: String
    Default: arn:aws:secretsmanager:eu-west-2:008739416430:secret:metaapi-account-id-demo-mJYsCi

Resources:

  ##########################
  ##### STEP FUNCTIONS #####
  ##########################
  StateMachineAll:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/all.json
      DefinitionSubstitutions:
        Controller: !GetAtt Controller.Arn
        DynamoTable: !Ref ControllerTable
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref Controller
            
  StateMachineDaily:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/daily.json
      DefinitionSubstitutions:
        Controller: !GetAtt Controller.Arn
        DynamoTable: !Ref ControllerTable
      # Events:
      #   DailySchedule:
      #     Type: Schedule
      #     Properties:
      #       Description: Schedule to update the dataset every morning
      #       Enabled: True
      #       Schedule: cron(0 2 * * ? *)
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref Controller
            
  ##################
  ##### LAMBDA #####
  ##################     
  Controller:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      ImageConfig:
        Command: [ "app.lambda_handler" ]
      Timeout: 900
      MemorySize: 512
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./lambda
      DockerTag: python3.9-v1
      
  ####################
  ##### DYNAMODB #####
  ####################
  ControllerTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 25
        WriteCapacityUnits: 25

  #################
  ##### ROLES #####
  #################
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-LambdaExecutionRole"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${Datalake}"
                  - !Sub "arn:aws:s3:::${Datalake}/*"
              - Effect: Allow
                Action:
                  - "secretsmanager:*" # Allowing all for now
                Resource:
                  - !Ref MetaAPIKey 
                  - !Ref MetaAPIDemoAccountID
              - Effect: Allow
                Action:
                  - "dynamodb:*"
                Resource:
                  - !GetAtt [ ControllerTable, Arn]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"